#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

struct Node {
    string keyword;
    string meaning;
    Node* left;
    Node* right;
    int height;

    Node(const string& key, const string& val) : keyword(key), meaning(val), left(nullptr), right(nullptr), height(1) {}
};

class AVLTree {
private:
    Node* root;

    int getHeight(Node* node) {
        if (node == nullptr) return 0;
        return node->height;
    }

    int getBalanceFactor(Node* node) {
        if (node == nullptr) return 0;
        return getHeight(node->left) - getHeight(node->right);
    }

    Node* rightRotate(Node* y) {
        Node* x = y->left;
        Node* T2 = x->right;

        x->right = y;
        y->left = T2;

        y->height = 1 + max(getHeight(y->left), getHeight(y->right));
        x->height = 1 + max(getHeight(x->left), getHeight(x->right));

        return x;
    }

    Node* leftRotate(Node* x) {
        Node* y = x->right;
        Node* T2 = y->left;

        y->left = x;
        x->right = T2;

        x->height = 1 + max(getHeight(x->left), getHeight(x->right));
        y->height = 1 + max(getHeight(y->left), getHeight(y->right));

        return y;
    }

    Node* insert(Node* node, const string& key, const string& val) {
        if (node == nullptr) {
            return new Node(key, val);
        }

        if (key < node->keyword) {
            node->left = insert(node->left, key, val);
        } else if (key > node->keyword) {
            node->right = insert(node->right, key, val);
        } else {
            node->meaning = val; // Update value for existing key
            return node;
        }

        node->height = 1 + max(getHeight(node->left), getHeight(node->right));
        int balance = getBalanceFactor(node);

        if (balance > 1 && key < node->left->keyword) {
            return rightRotate(node);
        }
        if (balance < -1 && key > node->right->keyword) {
            return leftRotate(node);
        }
        if (balance > 1 && key > node->left->keyword) {
            node->left = leftRotate(node->left);
            return rightRotate(node);
        }
        if (balance < -1 && key < node->right->keyword) {
            node->right = rightRotate(node->right);
            return leftRotate(node);
        }

        return node;
    }

    Node* minValueNode(Node* node) {
        Node* current = node;
        while (current->left != nullptr) {
            current = current->left;
        }
        return current;
    }

    Node* deleteNode(Node* root, const string& key) {
        if (root == nullptr) return root;

        if (key < root->keyword) {
            root->left = deleteNode(root->left, key);
        } else if (key > root->keyword) {
            root->right = deleteNode(root->right, key);
        } else {
            if (root->left == nullptr || root->right == nullptr) {
                Node* temp = root->left ? root->left : root->right;
                if (temp == nullptr) {
                    temp = root;
                    root = nullptr;
                } else {
                    *root = *temp;
                }
                delete temp;
            } else {
                Node* temp = minValueNode(root->right);
                root->keyword = temp->keyword;
                root->meaning = temp->meaning;
                root->right = deleteNode(root->right, temp->keyword);
            }
        }

        if (root == nullptr) return root;

        root->height = 1 + max(getHeight(root->left), getHeight(root->right));
        int balance = getBalanceFactor(root);

        if (balance > 1 && getBalanceFactor(root->left) >= 0) {
            return rightRotate(root);
        }
        if (balance < -1 && getBalanceFactor(root->right) <= 0) {
            return leftRotate(root);
        }
        if (balance > 1 && getBalanceFactor(root->left) < 0) {
            root->left = leftRotate(root->left);
            return rightRotate(root);
        }
        if (balance < -1 && getBalanceFactor(root->right) > 0) {
            root->right = rightRotate(root->right);
            return leftRotate(root);
        }

        return root;
    }

    void inorder(Node* root) {
        if (root != nullptr) {
            inorder(root->left);
            cout << root->keyword << ": " << root->meaning << endl;
            inorder(root->right);
        }
    }

    int maxComparisons(Node* root, const string& key, int count = 0) {
        if (root == nullptr) return count;

        if (key < root->keyword) {
            return maxComparisons(root->left, key, count + 1);
        } else if (key > root->keyword) {
            return maxComparisons(root->right, key, count + 1);
        } else {
            return count + 1;
        }
    }

public:
    AVLTree() : root(nullptr) {}

    void addKeyword(const string& key, const string& val) {
        root = insert(root, key, val);
    }

    void deleteKeyword(const string& key) {
        root = deleteNode(root, key);
    }

    void updateKeyword(const string& key, const string& val) {
        deleteKeyword(key);
        addKeyword(key, val);
    }

    void displaySorted(bool ascending = true) {
        if (ascending) {
            inorder(root);
        } else {
            displayReverse(root);
        }
    }

    int findMaxComparisons(const string& key) {
        return maxComparisons(root, key);
    }

    Node* getRoot() const {
        return root;
    }

    void displayReverse(Node* root) {
        if (root != nullptr) {
            displayReverse(root->right);
            cout << root->keyword << ": " << root->meaning << endl;
            displayReverse(root->left);
        }
    }
};

int main() {
    AVLTree dictionary;
    int choice;
    string key, value;

    do {
        cout << "\nDictionary Management System\n";
        cout << "1. Add Keyword\n";
        cout << "2. Delete Keyword\n";
        cout << "3. Update Keyword\n";
        cout << "4. Display Sorted Data (Ascending)\n";
        cout << "5. Display Sorted Data (Descending)\n";
        cout << "6. Find Maximum Comparisons for Keyword\n";
        cout << "7. Exit\n";
        cout << "Enter your choice: ";
        cin>> choice;
        cin.ignore(); // Clear input buffer

        switch (choice) {
            case 1: {
                cout << "Enter keyword: ";
                getline(cin, key);
                cout << "Enter meaning: ";
                getline(cin, value);
                dictionary.addKeyword(key, value);
                break;
            }
            case 2: {
                cout << "Enter keyword to delete: ";
                getline(cin, key);
                dictionary.deleteKeyword(key);
                break;
            }
            case 3: {
                cout << "Enter keyword to update: ";
                getline(cin, key);
                cout << "Enter new meaning: ";
                getline(cin, value);
                dictionary.updateKeyword(key, value);
                break;
            }
            case 4: {
                cout << "Sorted Data (Ascending):\n";
                dictionary.displaySorted(true);
                break;
            }
            case 5: {
                cout << "Sorted Data (Descending):\n";
                dictionary.displaySorted(false);
                break;
            }
            case 6: {
                cout << "Enter keyword to find maximum comparisons: ";
                getline(cin, key);
                int maxComp = dictionary.findMaxComparisons(key);
                cout << "Maximum comparisons required to find '" << key << "': " << maxComp << endl;
                break;
            }
            case 7:
                cout << "Exiting program...\n";
                break;
            default:
                cout << "Invalid choice!\n";
        }
    } while (choice != 7);

    return 0;
}
