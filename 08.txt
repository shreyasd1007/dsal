#include <iostream>
#include <limits>
#include <vector>
using namespace std;

struct Node {
    int key;
    double probability;
    Node* left;
    Node* right;
};

double optimalCost(vector<Node>& keys, int i, int j) {
    if (i > j) {
        return 0;
    }

    double minCost = numeric_limits<double>::max();
    for (int k = i; k <= j; k++) {
        double leftCost = optimalCost(keys, i, k - 1);
        double rightCost = optimalCost(keys, k + 1, j);
        double cost = leftCost + rightCost + keys[k].probability;
        minCost = min(minCost, cost);
    }

    return minCost;
}

Node* constructOBST(vector<Node>& keys, int i, int j) {
    if (i > j) {
        return nullptr;
    }

    int minCostIndex = i;
    double minCost = numeric_limits<double>::max();
    for (int k = i; k <= j; k++) {
        double leftCost = optimalCost(keys, i, k - 1);
        double rightCost = optimalCost(keys, k + 1, j);
        double cost = leftCost + rightCost + keys[k].probability;
        if (cost < minCost) {
            minCost = cost;
            minCostIndex = k;
        }
    }

    Node* root = new Node(keys[minCostIndex]);
    root->left = constructOBST(keys, i, minCostIndex - 1);
    root->right = constructOBST(keys, minCostIndex + 1, j);
    return root;
}

void printOBST(Node* root, int depth = 0) {
    if (root) {
        printOBST(root->right, depth + 1);
        cout << string(depth, '\t') << "Key: " << root->key << ", Probability: " << root->probability << endl;
        printOBST(root->left, depth + 1);
    }
}

int main() {
    vector<Node> keys;
    int choice;
    
    do {
        cout << "\nOptimal Binary Search Tree Management\n";
        cout << "1. Add Key\n";
        cout << "2. Construct Optimal BST\n";
        cout << "3. Print Optimal BST\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore(); // Clear input buffer

        switch (choice) {
            case 1: {
                int key;
                double probability;
                cout << "Enter key: ";
                cin >> key;
                cin.ignore(); // Clear input buffer
                cout << "Enter probability: ";
                cin >> probability;
                cin.ignore(); // Clear input buffer
                keys.push_back({ key, probability, nullptr, nullptr });
                break;
            }
            case 2: {
                if (keys.empty()) {
                    cout << "No keys added yet!\n";
                } else {
                    Node* root = constructOBST(keys, 0, keys.size() - 1);
                    cout << "Optimal BST constructed!\n";
                }
                break;
            }
            case 3: {
                if (keys.empty()) {
                    cout << "No keys added yet!\n";
                } else {
                    Node* root = constructOBST(keys, 0, keys.size() - 1);
                    cout << "Optimal BST:\n";
                    printOBST(root);
                }
                break;
            }
            case 4:
                cout << "Exiting program...\n";
                break;
            default:
                cout << "Invalid choice!\n";
        }
    } while (choice != 4);

    return 0;
}
